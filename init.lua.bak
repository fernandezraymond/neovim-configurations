local lazypath = local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
	vim.fn.system({
		"git",
		"clone",
		"--filter=blob:none",
		"https://github.com/folke/lazy.nvim.git",
		"--branch=stable", -- latest stable release
		lazypath,
	})
end
vim.opt.rtp:prepend(lazypath)

-- Example using a list of specs with the default options
vim.g.mapleader = " " -- Make sure to set `mapleader` before lazy so your mappings are correct
vim.opt.clipboard = "unnamedplus" -- Sync with system clipboard

require("lazy").setup({
	"folke/which-key.nvim",
	{ "folke/neoconf.nvim", cmd = "Neoconf" },
	"folke/neodev.nvim",
})


--if not vim.loop.fs_stat(lazypath) then
--	vim.fn.system({
--		"git",
--		"clone",
--		"--filter=blob:none",
--		"https://github.com/folke/lazy.nvim.git",
--		"--branch=stable", -- latest stable release
--		lazypath,
--	})
--end
--vim.opt.rtp:prepend(lazypath)
--
---- Example using a list of specs with the default options
--vim.g.mapleader = " " -- Make sure to set `mapleader` before lazy so your mappings are correct
--vim.opt.number = true
--vim.opt.clipboard = "unnamedplus" -- Sync with system clipboard
--vim.opt.cursorline = true -- Enable highlighting of the current line
--vim.opt.expandtab = true -- Use spaces instead of tabs
--vim.opt.conceallevel = 3 -- Hide * markup for bold and italic
--vim.opt.relativenumber = true -- Relative line numbers
--vim.opt.shiftwidth = 2 -- Size of an indent
--vim.opt.smartindent = true -- Insert indents automatically
--vim.opt.tabstop = 2 -- Number of spaces tabs count for
--vim.keymap.set("n", "<leader>b", ":Ex<CR>")
--
--require("lazy").setup({
--	{
--		'nvim-telescope/telescope.nvim', tag = '0.1.2',
--		dependencies = { 'nvim-lua/plenary.nvim' }
--	},
--	{
--		"nvim-treesitter/nvim-treesitter",
--		build = ":TSUpdate",
--		config = function () 
--			local configs = require("nvim-treesitter.configs")
--
--			configs.setup({
--				ensure_installed = { "c", "lua", "vim", "vimdoc", "query", "elixir", "heex", "javascript", "html" },
--				sync_install = false,
--				highlight = { enable = true },
--				indent = { enable = true },  
--			})
--		end
--	},
--  {
--    "folke/tokyonight.nvim",
--    lazy = false,
--    priority = 1000,
--    opts = {},
--    config = function ()
--      require("tokyonight").setup({
--        -- your configuration comes here
--        -- or leave it empty to use the default settings
--        style = "moon", -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`
--        light_style = "day", -- The theme is used when the background is set to light
--        transparent = false, -- Enable this to disable setting the background color
--        terminal_colors = true, -- Configure the colors used when opening a `:terminal` in [Neovim](https://github.com/neovim/neovim)
--        styles = {
--          -- Style to be applied to different syntax groups
--          -- Value is any valid attr-list value for `:help nvim_set_hl`
--          comments = { italic = true },
--          keywords = { italic = true },
--          functions = {},
--          variables = {},
--          -- Background styles. Can be "dark", "transparent" or "normal"
--          sidebars = "dark", -- style for sidebars, see below
--          floats = "dark", -- style for floating windows
--        },
--        sidebars = { "qf", "help" }, -- Set a darker background on sidebar-like windows. For example: `["qf", "vista_kind", "terminal", "packer"]`
--        day_brightness = 0.3, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
--        hide_inactive_statusline = false, -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.
--        dim_inactive = false, -- dims inactive windows
--        lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold
--
--        --- You can override specific color groups to use other groups or a hex color
--        --- function will be called with a ColorScheme table
--        ---@param colors ColorScheme
--        on_colors = function(colors) end,
--
--        --- You can override specific highlights to use other groups or a hex color
--        --- function will be called with a Highlights and ColorScheme table
--        ---@param highlights Highlights
--        ---@param colors ColorScheme
--        on_highlights = function(hl, c) end,
--      })
--    end
--  },
--	{
--		'nvim-lualine/lualine.nvim',
--		dependencies = { 'nvim-tree/nvim-web-devicons' },
--		config = function ()
--			require('lualine').setup {
--				options = {
--					icons_enabled = true,
--					theme = 'tokyonight',
--					component_separators = { left = '', right = ''},
--					section_separators = { left = '', right = ''},
--					disabled_filetypes = {
--						statusline = {},
--						winbar = {},
--					},
--					ignore_focus = {},
--					always_divide_middle = true,
--					globalstatus = false,
--					refresh = {
--						statusline = 1000,
--						tabline = 1000,
--						winbar = 1000,
--					}
--				},
--				sections = {
--					lualine_a = {'mode'},
--					lualine_b = {'branch', 'diff', 'diagnostics'},
--					lualine_c = {'filename'},
--					lualine_x = {'encoding', 'fileformat', 'filetype'},
--					lualine_y = {'progress'},
--					lualine_z = {'location'}
--				},
--				inactive_sections = {
--					lualine_a = {},
--					lualine_b = {},
--					lualine_c = {'filename'},
--					lualine_x = {'location'},
--					lualine_y = {},
--					lualine_z = {}
--				},
--				tabline = {},
--				winbar = {},
--				inactive_winbar = {},
--				extensions = {}
--			}
--		end
--	},
--  {
--    "folke/todo-comments.nvim",
--    dependencies = { "nvim-lua/plenary.nvim" },
--    opts = {
--      -- your configuration comes here
--      -- or leave it empty to use the default settings
--      -- refer to the configuration section below
--    }
--  },
--})
--
--vim.cmd[[colorscheme tokyonight]]
--
--local builtin = require('telescope.builtin')
--vim.keymap.set('n', '<leader>f', builtin.find_files, {})
--vim.keymap.set('n', '<leader>l', builtin.live_grep, {})
--vim.keymap.set('n', '<leader>g', builtin.git_status, {})
